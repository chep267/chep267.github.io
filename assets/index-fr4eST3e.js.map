{"version":3,"file":"index-fr4eST3e.js","sources":["../../src/modules/module-auth/hooks/useRecover.ts","../../src/modules/module-auth/components/RecoverForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport { useMutation } from '@tanstack/react-query';\n\n/** apis */\nimport { apiRecover } from '@module-auth/apis';\n\n/** constants */\nimport { AUTH_ERROR_CODES } from '@module-auth/constants/error';\n\n/** utils */\nimport { authMessage } from '@module-auth/utils/messages';\n\n/** hooks */\nimport { useBase } from '@module-base/hooks/useBase';\n\n/** types */\nimport type { FirebaseError } from '@firebase/app';\n\nexport function useRecover() {\n    const { notify } = useBase();\n\n    return useMutation({\n        mutationFn: apiRecover,\n        onSuccess: () => {\n            notify.toggleNotify({\n                open: true,\n                mode: 'success',\n                intlMessage: authMessage[`module.auth.form.status.recover.success`],\n            });\n        },\n        onError: (error: FirebaseError) => {\n            const code = error?.code === AUTH_ERROR_CODES.USER_DELETED ? 'recover.fail' : 'server.busy';\n            notify.toggleNotify({\n                open: true,\n                mode: 'error',\n                intlMessage: authMessage[`module.auth.form.status.${code}`],\n            });\n        },\n    });\n}\n","/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants/localStoreKey';\nimport { AUTH_SCREEN } from '@module-auth/constants/screen';\n\n/** utils */\nimport { Decrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\nimport { authFormSchema } from '@module-auth/utils/helpers/authFormSchema';\n\n/** hooks */\nimport { useRecover } from '@module-auth/hooks/useRecover';\n\n/** styles */\nimport useStyles from '@module-auth/components/SignInForm/styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function RecoverForm() {\n    const { formatMessage } = useIntl();\n    const RECOVER = useRecover();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: Decrypt(localStorageBase.get(emailLocalKey)),\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['Recover']['Payload']) => RECOVER.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.recover'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.SIGN_IN} replace>\n                        {formatMessage(authMessage['module.auth.form.title.signin'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={RECOVER.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.recover'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useRecover","notify","useBase","useMutation","mutationFn","apiRecover","onSuccess","toggleNotify","open","mode","intlMessage","authMessage","onError","error","code","AUTH_ERROR_CODES","USER_DELETED","RecoverForm","formatMessage","useIntl","RECOVER","classes","useStyles","handleSubmit","control","formState","errors","useForm","defaultValues","email","Decrypt","localStorageBase","get","emailLocalKey","resolver","yupResolver","authFormSchema","onSubmit","React","useCallback","data","mutate","jsxs","Fragment","jsx","Typography","title","Paper","form","Controller","field","Boolean","errorMessage","message","TextField","Stack","link","Link","AUTH_SCREEN","SIGN_IN","LoadingButton","isPending","btnSubmit"],"mappings":"2fAuBO,SAASA,GAAa,CACnB,KAAA,CAAEC,OAAAA,GAAWC,EAAQ,EAE3B,OAAOC,EAAY,CACfC,WAAYC,EACZC,UAAWA,IAAM,CACbL,EAAOM,aAAa,CAChBC,KAAM,GACNC,KAAM,UACNC,YAAaC,EAAa,yCAAwC,CAAA,CACrE,CACL,EACAC,QAAUC,GAAyB,CAC/B,MAAMC,EAAOD,GAAOC,OAASC,EAAiBC,aAAe,eAAiB,cAC9Ef,EAAOM,aAAa,CAChBC,KAAM,GACNC,KAAM,QACNC,YAAaC,EAAa,2BAA0BG,CAAK,EAAC,CAAA,CAC7D,CACL,CAAA,CACH,CACL,CCTe,SAAAG,GAAuB,CAC5B,KAAA,CAAEC,cAAAA,GAAkBC,EAAQ,EAC5BC,EAAUpB,IACVqB,EAAUC,IAEV,CACFC,aAAAA,EACAC,QAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,GACpBC,EAA0B,CAC1BC,cAAe,CACXC,MAAOC,EAAQC,EAAiBC,IAAIC,CAAa,CAAC,CACtD,EACAxB,KAAM,WACNyB,SAAUC,EAAYC,CAAc,CAAA,CACvC,EAEKC,EAAWC,EAAMC,YAAaC,GAA6CpB,EAAQqB,OAAOD,CAAI,EAAG,CAAA,CAAE,EAEzG,OAEQE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAAA,IAAAC,EAAA,CAAW,QAAQ,KAAK,UAAWxB,EAAQyB,MACvC5B,SAAcP,EAAAA,EAAY,gCAAgC,CAAC,CAChE,CAAA,EAEC+B,EAAAA,KAAAK,EAAA,CAAM,UAAW1B,EAAQ2B,KAAM,UAAU,OAAO,SAAUzB,EAAac,CAAQ,EAAG,WAAU,GACzF,SAAA,CAAAO,EAAA,IAACK,EACG,CAAA,KAAK,QACL,QAAAzB,EACA,OAAQ,CAAC,CAAE0B,MAAAA,CAAAA,IAAY,CACbrC,MAAAA,EAAQsC,EAAQzB,EAAOG,MACvBuB,EAAe1B,EAAOG,OAAOwB,QAE/B,OAAAT,EAAA,IAACU,EAAA,CACOJ,GAAAA,EACJ,KAAK,QACL,MAAOhC,EAAcP,EAAY,oCAAoC,CAAC,EACtE,QAAQ,WACR,WAAY,GACZ,UAAS,GACT,UAAS,GACT,MAAAE,EACA,WAAYuC,GAAgBlC,EAAcP,EAAYyC,CAAY,CAAC,CAAA,CAAA,CACrE,EAER,EAGLV,EAAA,KAAAa,EAAA,CAAM,UAAWlC,EAAQmC,KACtB,SAAA,CAACZ,EAAAA,IAAAa,EAAA,CAAK,GAAIC,EAAYC,QAAS,QAAO,GACjCzC,SAAcP,EAAAA,EAAY,+BAA+B,CAAC,CAC/D,CAAA,QACCkC,EAAW,CAAA,QAAQ,KAAK,MAAM,eAAc,SAE7C,MAAA,EACAD,EAAAA,IAACa,EAAK,CAAA,GAAIC,EAAYtC,QAAS,QAAO,GACjCF,SAAcP,EAAAA,EAAY,gCAAgC,CAAC,CAChE,CAAA,CAAA,EACJ,EAEAiC,MAACgB,GACG,KAAK,SACL,QAASxC,EAAQyC,UACjB,KAAK,QACL,QAAQ,YACR,UAAS,GACT,UAAWxC,EAAQyC,UAClB5C,WAAcP,EAAY,wCAAwC,CAAC,EACxE,CAAA,EACJ,CACJ,CAAA,CAAA,CAER"}