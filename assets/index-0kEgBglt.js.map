{"version":3,"file":"index-0kEgBglt.js","sources":["../../src/modules/module-auth/hooks/useRegister.ts","../../src/modules/module-auth/components/RegisterForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dong.nguyenthanh@powergatesoftware.com on 26/07/2023.\n *\n */\n\nimport { useMutation } from '@tanstack/react-query';\nimport { useIntl } from 'react-intl';\n\n/** apis */\nimport { apiRegister } from '@module-auth/apis';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants/localStoreKey';\nimport { AUTH_ERROR_CODES } from '@module-auth/constants/error';\n\n/** utils */\nimport { Encrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\n\n/** hooks */\nimport { useBase } from '@module-base/hooks/useBase';\n\n/** types */\nimport type { FirebaseError } from 'firebase/app';\n\nexport function useRegister() {\n    const intl = useIntl();\n    const { notify } = useBase();\n\n    return useMutation({\n        mutationFn: apiRegister,\n        onSuccess: (_response, { email }) => {\n            localStorageBase.set(emailLocalKey, Encrypt(email));\n            notify.toggleNotify({\n                open: true,\n                mode: 'success',\n                message: intl.formatMessage(authMessage[`module.auth.form.status.register.success`]),\n            });\n        },\n        onError: (error: FirebaseError) => {\n            const code = error?.code === AUTH_ERROR_CODES.EMAIL_EXISTS ? 'exist' : 'fail';\n            notify.toggleNotify({\n                open: true,\n                mode: 'error',\n                message: intl.formatMessage(authMessage[`module.auth.form.status.register.${code}`]),\n            });\n        },\n    });\n}\n","/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** components */\nimport PasswordField from '@module-base/components/PasswordField';\n\n/** constants */\nimport { AUTH_SCREEN } from '@module-auth/constants/screen';\n\n/** utils */\nimport { authMessage } from '@module-auth/utils/messages';\nimport { authFormSchema } from '@module-auth/utils/helpers/authFormSchema';\n\n/** hooks */\nimport { useRegister } from '@module-auth/hooks/useRegister';\n\n/** styles */\nimport useStyles from '@module-auth/components/SignInForm/styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function RegisterForm() {\n    const { formatMessage } = useIntl();\n    const REGISTER = useRegister();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n        setFocus,\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: '',\n            password: '',\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['Register']['Payload']) => REGISTER.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.register'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"email\"\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n                <Controller\n                    name=\"password\"\n                    control={control}\n                    render={({ field: { ref, ...field } }) => {\n                        const error = Boolean(errors.password);\n                        const errorMessage = errors.password?.message as keyof typeof authMessage;\n                        return (\n                            <PasswordField\n                                {...field}\n                                inputRef={ref}\n                                label={formatMessage(authMessage['module.auth.form.input.label.password'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"password\"\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                                setFocus={() => setFocus('password')}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.SIGN_IN} replace>\n                        {formatMessage(authMessage['module.auth.form.title.signin'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={REGISTER.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.register'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useRegister","intl","useIntl","notify","useBase","useMutation","mutationFn","apiRegister","onSuccess","_response","email","localStorageBase","set","emailLocalKey","Encrypt","toggleNotify","open","mode","message","formatMessage","authMessage","onError","error","code","AUTH_ERROR_CODES","EMAIL_EXISTS","RegisterForm","REGISTER","classes","useStyles","handleSubmit","control","formState","errors","setFocus","useForm","defaultValues","password","resolver","yupResolver","authFormSchema","onSubmit","React","useCallback","data","mutate","jsxs","Fragment","jsx","Typography","title","Paper","form","Controller","field","Boolean","errorMessage","TextField","ref","PasswordField","Stack","link","Link","AUTH_SCREEN","SIGN_IN","RECOVER","LoadingButton","isPending","btnSubmit"],"mappings":"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"}