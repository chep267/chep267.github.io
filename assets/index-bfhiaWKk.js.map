{"version":3,"file":"index-bfhiaWKk.js","sources":["../../src/modules/module-auth/hooks/useRecover.ts","../../src/modules/module-auth/components/RecoverForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport { useMutation } from '@tanstack/react-query';\n\n/** apis */\nimport { apiRecover } from '@module-auth/apis';\n\n/** constants */\nimport { AUTH_ERROR_CODES } from '@module-auth/constants';\n\n/** utils */\nimport { authMessage } from '@module-auth/utils';\n\n/** hooks */\nimport { useNotify } from '@module-base/hooks';\n\n/** types */\nimport type { FirebaseError } from 'firebase/app';\n\nexport function useRecover() {\n    const NOTIFY = useNotify();\n\n    return useMutation({\n        mutationFn: apiRecover,\n        onSuccess: () => {\n            NOTIFY.method.toggleNotify({\n                open: true,\n                mode: 'success',\n                intlMessage: authMessage[`module.auth.form.status.recover.success`],\n            });\n        },\n        onError: (error: FirebaseError) => {\n            const code = error?.code === AUTH_ERROR_CODES.USER_DELETED ? 'recover.fail' : 'server.busy';\n            NOTIFY.method.toggleNotify({\n                open: true,\n                mode: 'error',\n                intlMessage: authMessage[`module.auth.form.status.${code}`],\n            });\n        },\n    });\n}\n","/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants';\nimport { AUTH_SCREEN } from '@module-auth/constants';\n\n/** utils */\nimport { Decrypt, localStorageBase } from '@module-base/utils';\nimport { authMessage, authFormSchema } from '@module-auth/utils';\n\n/** hooks */\nimport { useRecover } from '@module-auth/hooks';\n\n/** styles */\nimport useStyles from '@module-auth/components/SignInForm/styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function RecoverForm() {\n    const { formatMessage } = useIntl();\n    const RECOVER = useRecover();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: Decrypt(localStorageBase.get(emailLocalKey)),\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['Recover']['Payload']) => RECOVER.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.recover'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.SIGN_IN} replace>\n                        {formatMessage(authMessage['module.auth.form.title.signin'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={RECOVER.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.recover'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useRecover","NOTIFY","useNotify","useMutation","apiRecover","authMessage","error","code","AUTH_ERROR_CODES","RecoverForm","formatMessage","useIntl","RECOVER","classes","useStyles","handleSubmit","control","errors","useForm","Decrypt","localStorageBase","emailLocalKey","yupResolver","authFormSchema","onSubmit","React.useCallback","data","jsxs","Fragment","jsx","Typography","Paper","Controller","field","errorMessage","TextField","Stack","Link","AUTH_SCREEN","LoadingButton"],"mappings":"6SAuBO,SAASA,GAAa,CACzB,MAAMC,EAASC,IAEf,OAAOC,EAAY,CACf,WAAYC,EACZ,UAAW,IAAM,CACbH,EAAO,OAAO,aAAa,CACvB,KAAM,GACN,KAAM,UACN,YAAaI,EAAY,yCAAyC,CAAA,CACrE,CACL,EACA,QAAUC,GAAyB,CAC/B,MAAMC,EAAOD,GAAO,OAASE,EAAiB,aAAe,eAAiB,cAC9EP,EAAO,OAAO,aAAa,CACvB,KAAM,GACN,KAAM,QACN,YAAaI,EAAY,2BAA2BE,CAAI,EAAE,CAAA,CAC7D,CACL,CAAA,CACH,CACL,CCXe,SAARE,GAA+B,CAC5B,KAAA,CAAE,cAAAC,GAAkBC,IACpBC,EAAUZ,IACVa,EAAUC,IAEV,CACF,aAAAC,EACA,QAAAC,EACA,UAAW,CAAE,OAAAC,CAAO,GACpBC,EAA0B,CAC1B,cAAe,CACX,MAAOC,EAAQC,EAAiB,IAAIC,CAAa,CAAC,CACtD,EACA,KAAM,WACN,SAAUC,EAAYC,CAAc,CAAA,CACvC,EAEKC,EAAWC,EAAM,YAAaC,GAA6Cd,EAAQ,OAAOc,CAAI,EAAG,CAAA,CAAE,EAEzG,OAEQC,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAAA,IAAAC,EAAA,CAAW,QAAQ,KAAK,UAAWjB,EAAQ,MACvC,SAAcH,EAAAL,EAAY,gCAAgC,CAAC,CAChE,CAAA,EAECsB,EAAAA,KAAAI,EAAA,CAAM,UAAWlB,EAAQ,KAAM,UAAU,OAAO,SAAUE,EAAaS,CAAQ,EAAG,WAAU,GACzF,SAAA,CAAAK,EAAA,IAACG,EAAA,CACG,KAAK,QACL,QAAAhB,EACA,OAAQ,CAAC,CAAE,MAAAiB,KAAY,CACb,MAAA3B,EAAQ,EAAQW,EAAO,MACvBiB,EAAejB,EAAO,OAAO,QAE/B,OAAAY,EAAA,IAACM,EAAA,CACI,GAAGF,EACJ,KAAK,QACL,MAAOvB,EAAcL,EAAY,oCAAoC,CAAC,EACtE,QAAQ,WACR,WAAY,GACZ,UAAS,GACT,UAAS,GACT,MAAAC,EACA,WAAY4B,GAAgBxB,EAAcL,EAAY6B,CAAY,CAAC,CAAA,CAAA,CAG/E,CAAA,CACJ,EAECP,EAAA,KAAAS,EAAA,CAAM,UAAWvB,EAAQ,KACtB,SAAA,CAACgB,EAAAA,IAAAQ,EAAA,CAAK,GAAIC,EAAY,QAAS,QAAO,GACjC,SAAc5B,EAAAL,EAAY,+BAA+B,CAAC,CAC/D,CAAA,QACCyB,EAAW,CAAA,QAAQ,KAAK,MAAM,eAAe,SAE9C,MAAA,EACAD,EAAAA,IAACQ,EAAK,CAAA,GAAIC,EAAY,QAAS,QAAO,GACjC,SAAc5B,EAAAL,EAAY,gCAAgC,CAAC,CAChE,CAAA,CAAA,EACJ,EAEAwB,EAAA,IAACU,EAAA,CACG,KAAK,SACL,QAAS3B,EAAQ,UACjB,KAAK,QACL,QAAQ,YACR,UAAS,GACT,UAAWC,EAAQ,UAClB,SAAAH,EAAcL,EAAY,wCAAwC,CAAC,CAAA,CACxE,CAAA,EACJ,CACJ,CAAA,CAAA,CAER"}