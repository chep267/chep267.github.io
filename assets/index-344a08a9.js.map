{"version":3,"file":"index-344a08a9.js","sources":["../../src/modules/module-auth/hooks/useSignIn.ts","../../src/modules/module-auth/components/SignInForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dong.nguyenthanh@powergatesoftware.com on 26/07/2023.\n *\n */\n\nimport Cookies from 'js-cookie';\nimport { useMutation } from '@tanstack/react-query';\nimport { useIntl } from 'react-intl';\n\n/** apis */\nimport { apiSignIn } from '@module-auth/apis';\n\n/** constants */\nimport { accessTokenCookieKey, emailLocalKey } from '@module-base/constants/localStoreKey';\n\n/** utils */\nimport { Encrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\n\n/** hooks */\nimport { useBase } from '@module-base/hooks/useBase';\nimport { useAuth } from '@module-auth/hooks/useAuth';\n\nexport function useSignIn() {\n    const intl = useIntl();\n    const auth = useAuth();\n    const { notify } = useBase();\n\n    return useMutation({\n        mutationFn: apiSignIn,\n        onSuccess: async (response, { email }) => {\n            const me = response.user;\n            const accessToken = (await me.getIdToken()) || '';\n            localStorageBase.set(emailLocalKey, Encrypt(email));\n            Cookies.set(accessTokenCookieKey, accessToken, { expires: 1 });\n            auth.toggleAuth({ isAuth: true, me });\n        },\n        onError: () => {\n            notify.toggleNotify({\n                open: true,\n                mode: 'error',\n                message: intl.formatMessage(authMessage[`module.auth.form.status.email.incorrect`]),\n            });\n        },\n    });\n}\n","/**\n *\n * @author dong.nguyenthanh@powergatesoftware.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** components */\nimport PasswordField from '@module-base/components/PasswordField';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants/localStoreKey';\nimport { AUTH_SCREEN } from '@module-auth/constants/screen';\n\n/** utils */\nimport { Decrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\nimport { authFormSchema } from '@module-auth/utils/helpers/authFormSchema';\n\n/** hooks */\nimport { useSignIn } from '@module-auth/hooks/useSignIn';\n\n/** styles */\nimport useStyles from './styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function SignInForm() {\n    const { formatMessage } = useIntl();\n    const SIGN_IN = useSignIn();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: Decrypt(localStorageBase.get(emailLocalKey)),\n            password: '',\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['SignIn']['Payload']) => SIGN_IN.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.signin'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n                <Controller\n                    name=\"password\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.password);\n                        const errorMessage = errors.password?.message as keyof typeof authMessage;\n                        return (\n                            <PasswordField\n                                {...field}\n                                label={formatMessage(authMessage['module.auth.form.input.label.password'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.REGISTER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.register'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={SIGN_IN.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.signin'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useSignIn","intl","useIntl","auth","useAuth","notify","useBase","useMutation","mutationFn","apiSignIn","onSuccess","response","email","me","user","accessToken","getIdToken","localStorageBase","set","emailLocalKey","Encrypt","accessTokenCookieKey","expires","toggleAuth","isAuth","onError","toggleNotify","open","mode","message","formatMessage","authMessage","SignInForm","SIGN_IN","classes","useStyles","handleSubmit","control","formState","errors","useForm","defaultValues","Decrypt","get","password","resolver","yupResolver","authFormSchema","onSubmit","React","useCallback","data","mutate","jsxs","Fragment","jsx","Typography","title","Paper","form","Controller","field","error","Boolean","errorMessage","TextField","PasswordField","Stack","link","Link","AUTH_SCREEN","REGISTER","RECOVER","LoadingButton","isPending","btnSubmit"],"mappings":"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"}