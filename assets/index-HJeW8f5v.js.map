{"version":3,"file":"index-HJeW8f5v.js","sources":["../../src/modules/module-auth/hooks/useSignIn.ts","../../src/modules/module-auth/components/SignInForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport Cookies from 'js-cookie';\nimport { useMutation } from '@tanstack/react-query';\n\n/** apis */\nimport { apiSignIn } from '@module-auth/apis';\n\n/** constants */\nimport { accessTokenCookieKey, emailLocalKey } from '@module-base/constants/localStoreKey';\n\n/** utils */\nimport { Encrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\n\n/** hooks */\nimport { useNotify } from '@module-base/hooks/useNotify';\nimport { useAuth } from '@module-auth/hooks/useAuth';\n\nexport function useSignIn() {\n    const AUTH = useAuth();\n    const NOTIFY = useNotify();\n\n    return useMutation({\n        mutationFn: apiSignIn,\n        onSuccess: async (response, { email }) => {\n            const me = response.user;\n            const accessToken = (await me.getIdToken()) || '';\n            localStorageBase.set(emailLocalKey, Encrypt(email));\n            Cookies.set(accessTokenCookieKey, accessToken, { expires: 1 });\n            AUTH.method.setAuth({ isAuth: true, me });\n        },\n        onError: () => {\n            NOTIFY.method.toggleNotify({\n                open: true,\n                mode: 'error',\n                intlMessage: authMessage['module.auth.form.status.email.incorrect'],\n            });\n        },\n    });\n}\n","/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** components */\nimport PasswordField from '@module-base/components/PasswordField';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants/localStoreKey';\nimport { AUTH_SCREEN } from '@module-auth/constants/screen';\n\n/** utils */\nimport { Decrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\nimport { authFormSchema } from '@module-auth/utils/helpers/authFormSchema';\n\n/** hooks */\nimport { useSignIn } from '@module-auth/hooks/useSignIn';\n\n/** styles */\nimport useStyles from './styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function SignInForm() {\n    const { formatMessage } = useIntl();\n    const SIGN_IN = useSignIn();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n        setFocus,\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: Decrypt(localStorageBase.get(emailLocalKey)),\n            password: '',\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['SignIn']['Payload']) => SIGN_IN.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.signin'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"email\"\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n                <Controller\n                    name=\"password\"\n                    control={control}\n                    render={({ field: { ref, ...field } }) => {\n                        const error = Boolean(errors.password);\n                        const errorMessage = errors.password?.message as keyof typeof authMessage;\n                        return (\n                            <PasswordField\n                                {...field}\n                                inputRef={ref}\n                                label={formatMessage(authMessage['module.auth.form.input.label.password'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"password\"\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                                setFocus={() => setFocus('password')}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.REGISTER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.register'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={SIGN_IN.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.signin'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useSignIn","AUTH","useAuth","NOTIFY","useNotify","useMutation","apiSignIn","response","email","me","accessToken","localStorageBase","emailLocalKey","Encrypt","Cookies","accessTokenCookieKey","authMessage","SignInForm","formatMessage","useIntl","SIGN_IN","classes","useStyles","handleSubmit","control","errors","setFocus","useForm","Decrypt","yupResolver","authFormSchema","onSubmit","React.useCallback","data","jsxs","Fragment","jsx","Typography","Paper","Controller","field","error","errorMessage","TextField","ref","PasswordField","Stack","Link","AUTH_SCREEN","LoadingButton"],"mappings":"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"}