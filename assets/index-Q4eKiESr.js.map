{"version":3,"file":"index-Q4eKiESr.js","sources":["../../src/modules/module-auth/hooks/useRegister.ts","../../src/modules/module-auth/components/RegisterForm/index.tsx"],"sourcesContent":["/**\n *\n * @author dong.nguyenthanh@powergatesoftware.com on 26/07/2023.\n *\n */\n\nimport { useMutation } from '@tanstack/react-query';\n\n/** apis */\nimport { apiRegister } from '@module-auth/apis';\n\n/** constants */\nimport { emailLocalKey } from '@module-base/constants/localStoreKey';\nimport { AUTH_ERROR_CODES } from '@module-auth/constants/error';\n\n/** utils */\nimport { Encrypt } from '@module-base/utils/security';\nimport { localStorageBase } from '@module-base/utils/storages';\nimport { authMessage } from '@module-auth/utils/messages';\n\n/** hooks */\nimport { useBase } from '@module-base/hooks/useBase';\n\n/** types */\nimport type { FirebaseError } from 'firebase/app';\n\nexport function useRegister() {\n    const { notify } = useBase();\n\n    return useMutation({\n        mutationFn: apiRegister,\n        onSuccess: (_response, { email }) => {\n            localStorageBase.set(emailLocalKey, Encrypt(email));\n            notify.toggleNotify({\n                open: true,\n                mode: 'success',\n                intlMessage: authMessage[`module.auth.form.status.register.success`],\n            });\n        },\n        onError: (error: FirebaseError) => {\n            const code = error?.code === AUTH_ERROR_CODES.EMAIL_EXISTS ? 'exist' : 'fail';\n            notify.toggleNotify({\n                open: true,\n                mode: 'error',\n                intlMessage: authMessage[`module.auth.form.status.register.${code}`],\n            });\n        },\n    });\n}\n","/**\n *\n * @author dongntd267@gmail.com on 26/07/2023.\n *\n */\n\nimport * as React from 'react';\nimport { useIntl } from 'react-intl';\nimport { yupResolver } from '@hookform/resolvers/yup';\nimport { useForm, Controller } from 'react-hook-form';\n\n/** lib components */\nimport { Link } from 'react-router-dom';\nimport { Paper, Stack, Typography, TextField } from '@mui/material';\nimport { LoadingButton } from '@mui/lab';\n\n/** components */\nimport PasswordField from '@module-base/components/PasswordField';\n\n/** constants */\nimport { AUTH_SCREEN } from '@module-auth/constants/screen';\n\n/** utils */\nimport { authMessage } from '@module-auth/utils/messages';\nimport { authFormSchema } from '@module-auth/utils/helpers/authFormSchema';\n\n/** hooks */\nimport { useRegister } from '@module-auth/hooks/useRegister';\n\n/** styles */\nimport useStyles from '@module-auth/components/SignInForm/styles';\n\n/** types */\nimport type { AuthApiProps, FormAuthDataType } from '@module-auth/models';\n\nexport default function RegisterForm() {\n    const { formatMessage } = useIntl();\n    const REGISTER = useRegister();\n    const classes = useStyles();\n\n    const {\n        handleSubmit,\n        control,\n        formState: { errors },\n        setFocus,\n    } = useForm<FormAuthDataType>({\n        defaultValues: {\n            email: '',\n            password: '',\n        },\n        mode: 'onSubmit',\n        resolver: yupResolver(authFormSchema),\n    });\n\n    const onSubmit = React.useCallback((data: AuthApiProps['Register']['Payload']) => REGISTER.mutate(data), []);\n\n    return (\n        <>\n            <Typography variant=\"h3\" className={classes.title}>\n                {formatMessage(authMessage['module.auth.form.title.register'])}\n            </Typography>\n\n            <Paper className={classes.form} component=\"form\" onSubmit={handleSubmit(onSubmit)} noValidate>\n                <Controller\n                    name=\"email\"\n                    control={control}\n                    render={({ field }) => {\n                        const error = Boolean(errors.email);\n                        const errorMessage = errors.email?.message as keyof typeof authMessage;\n                        return (\n                            <TextField\n                                {...field}\n                                type=\"email\"\n                                label={formatMessage(authMessage['module.auth.form.input.label.email'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"email\"\n                                autoFocus // eslint-disable-line jsx-a11y/no-autofocus\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                            />\n                        );\n                    }}\n                />\n                <Controller\n                    name=\"password\"\n                    control={control}\n                    render={({ field: { ref, ...field } }) => {\n                        const error = Boolean(errors.password);\n                        const errorMessage = errors.password?.message as keyof typeof authMessage;\n                        return (\n                            <PasswordField\n                                {...field}\n                                inputRef={ref}\n                                label={formatMessage(authMessage['module.auth.form.input.label.password'])}\n                                variant=\"outlined\"\n                                spellCheck={false}\n                                fullWidth\n                                autoComplete=\"password\"\n                                error={error}\n                                helperText={errorMessage && formatMessage(authMessage[errorMessage])}\n                                setFocus={() => setFocus('password')}\n                            />\n                        );\n                    }}\n                />\n\n                <Stack className={classes.link}>\n                    <Link to={AUTH_SCREEN.SIGN_IN} replace>\n                        {formatMessage(authMessage['module.auth.form.title.signin'])}\n                    </Link>\n                    <Typography variant=\"h6\" color=\"primary.main\">\n                        &nbsp;/&nbsp;\n                    </Typography>\n                    <Link to={AUTH_SCREEN.RECOVER} replace>\n                        {formatMessage(authMessage['module.auth.form.title.recover'])}\n                    </Link>\n                </Stack>\n\n                <LoadingButton\n                    type=\"submit\"\n                    loading={REGISTER.isPending}\n                    size=\"large\"\n                    variant=\"contained\"\n                    fullWidth\n                    className={classes.btnSubmit}>\n                    {formatMessage(authMessage['module.auth.form.button.submit.register'])}\n                </LoadingButton>\n            </Paper>\n        </>\n    );\n}\n"],"names":["useRegister","notify","useBase","useMutation","mutationFn","apiRegister","onSuccess","_response","email","localStorageBase","set","emailLocalKey","Encrypt","toggleNotify","open","mode","intlMessage","authMessage","onError","error","code","AUTH_ERROR_CODES","EMAIL_EXISTS","RegisterForm","formatMessage","useIntl","REGISTER","classes","useStyles","handleSubmit","control","formState","errors","setFocus","useForm","defaultValues","password","resolver","yupResolver","authFormSchema","onSubmit","React","useCallback","data","mutate","jsxs","Fragment","jsx","Typography","title","Paper","form","Controller","field","Boolean","errorMessage","message","TextField","ref","PasswordField","Stack","link","Link","AUTH_SCREEN","SIGN_IN","RECOVER","LoadingButton","isPending","btnSubmit"],"mappings":"umBA0BO,SAASA,GAAc,CACpB,KAAA,CAAEC,OAAAA,GAAWC,EAAQ,EAE3B,OAAOC,EAAY,CACfC,WAAYC,EACZC,UAAWA,CAACC,EAAW,CAAEC,MAAAA,CAAAA,IAAY,CACjCC,EAAiBC,IAAIC,EAAeC,EAAQJ,CAAK,CAAC,EAClDP,EAAOY,aAAa,CAChBC,KAAM,GACNC,KAAM,UACNC,YAAaC,EAAa,0CAAyC,CAAA,CACtE,CACL,EACAC,QAAUC,GAAyB,CAC/B,MAAMC,EAAOD,GAAOC,OAASC,EAAiBC,aAAe,QAAU,OACvErB,EAAOY,aAAa,CAChBC,KAAM,GACNC,KAAM,QACNC,YAAaC,EAAa,oCAAmCG,CAAK,EAAC,CAAA,CACtE,CACL,CAAA,CACH,CACL,CCbe,SAAAG,GAAwB,CAC7B,KAAA,CAAEC,cAAAA,GAAkBC,EAAQ,EAC5BC,EAAW1B,IACX2B,EAAUC,IAEV,CACFC,aAAAA,EACAC,QAAAA,EACAC,UAAW,CAAEC,OAAAA,CAAO,EACpBC,SAAAA,GACAC,EAA0B,CAC1BC,cAAe,CACX3B,MAAO,GACP4B,SAAU,EACd,EACArB,KAAM,WACNsB,SAAUC,EAAYC,CAAc,CAAA,CACvC,EAEKC,EAAWC,EAAMC,YAAaC,GAA8CjB,EAASkB,OAAOD,CAAI,EAAG,CAAA,CAAE,EAE3G,OAEQE,EAAA,KAAAC,WAAA,CAAA,SAAA,CAACC,EAAAA,IAAAC,EAAA,CAAW,QAAQ,KAAK,UAAWrB,EAAQsB,MACvCzB,SAAcP,EAAAA,EAAY,iCAAiC,CAAC,CACjE,CAAA,EAEC4B,EAAAA,KAAAK,EAAA,CAAM,UAAWvB,EAAQwB,KAAM,UAAU,OAAO,SAAUtB,EAAaW,CAAQ,EAAG,WAAU,GACzF,SAAA,CAAAO,EAAA,IAACK,EACG,CAAA,KAAK,QACL,QAAAtB,EACA,OAAQ,CAAC,CAAEuB,MAAAA,CAAAA,IAAY,CACblC,MAAAA,EAAQmC,EAAQtB,EAAOxB,MACvB+C,EAAevB,EAAOxB,OAAOgD,QAE/B,OAAAT,EAAA,IAACU,EAAA,IACOJ,EACJ,KAAK,QACL,MAAO7B,EAAcP,EAAY,oCAAoC,CAAC,EACtE,QAAQ,WACR,WAAY,GACZ,UAAS,GACT,aAAa,QACb,UAAS,GACT,MAAAE,EACA,WAAYoC,GAAgB/B,EAAcP,EAAYsC,CAAY,CAAC,CAAA,CAAA,CACrE,EAER,QAELH,EACG,CAAA,KAAK,WACL,QAAAtB,EACA,OAAQ,CAAC,CAAEuB,MAAO,CAAEK,IAAAA,EAAK,GAAGL,CAAM,CAAA,IAAQ,CAChClC,MAAAA,EAAQmC,EAAQtB,EAAOI,SACvBmB,EAAevB,EAAOI,UAAUoB,QACtC,OACKT,EAAAA,IAAAY,EAAA,CACG,GAAIN,EACJ,SAAUK,EACV,MAAOlC,EAAcP,EAAY,uCAAuC,CAAC,EACzE,QAAQ,WACR,WAAY,GACZ,UAAS,GACT,aAAa,WACb,MAAAE,EACA,WAAYoC,GAAgB/B,EAAcP,EAAYsC,CAAY,CAAC,EACnE,SAAU,IAAMtB,EAAS,UAAU,CACrC,CAAA,CAAA,EAER,EAGLY,EAAA,KAAAe,EAAA,CAAM,UAAWjC,EAAQkC,KACtB,SAAA,CAACd,EAAAA,IAAAe,EAAA,CAAK,GAAIC,EAAYC,QAAS,QAAO,GACjCxC,SAAcP,EAAAA,EAAY,+BAA+B,CAAC,CAC/D,CAAA,QACC+B,EAAW,CAAA,QAAQ,KAAK,MAAM,eAAc,SAE7C,MAAA,EACAD,EAAAA,IAACe,EAAK,CAAA,GAAIC,EAAYE,QAAS,QAAO,GACjCzC,SAAcP,EAAAA,EAAY,gCAAgC,CAAC,CAChE,CAAA,CAAA,EACJ,EAEA8B,MAACmB,GACG,KAAK,SACL,QAASxC,EAASyC,UAClB,KAAK,QACL,QAAQ,YACR,UAAS,GACT,UAAWxC,EAAQyC,UAClB5C,WAAcP,EAAY,yCAAyC,CAAC,EACzE,CAAA,EACJ,CACJ,CAAA,CAAA,CAER"}